===========================================
DAY 1 PHP TASKS - 10 ESSENTIAL TASKS
===========================================

ðŸ“‹ TASK OVERVIEW
Complete these 10 tasks to master PHP Day 1 fundamentals.
Each task builds upon the previous one.

===========================================
TASK 1: BASIC PHP SYNTAX AND VARIABLES
===========================================
Create "basic_syntax.php" demonstrating:

1. Variables and Data Types:
   - Create variables: name (string), age (integer), height (float), is_student (boolean)
   - Display all variables using echo
   - Use different data types

2. String Operations:
   - Concatenate strings
   - Use strlen(), strtoupper(), strtolower()
   - Display string length and modified strings

3. Mathematical Operations:
   - Addition, subtraction, multiplication, division
   - Use variables for calculations
   - Display results

Example Output:
Name: John Doe
Age: 20
Height: 5.8
Is Student: true
String Length: 8
Uppercase: JOHN DOE
Calculation: 25 + 15 = 40

===========================================
TASK 2: FUNCTIONS AND VARIABLE SCOPE
===========================================
Create "functions.php" demonstrating:

1. Basic Function:
   - Create greetUser($name) function
   - Return "Hello, [name]!"
   - Call with different names

2. Function with Parameters:
   - Create calculateArea($length, $width)
   - Return rectangle area
   - Test with different values

3. Variable Scope:
   - Use global keyword
   - Demonstrate local vs global scope
   - Show variable accessibility

4. Function with Default Parameters:
   - Create setUserInfo($name, $age = 18, $city = "Unknown")
   - Test with different parameter combinations

Example Output:
Hello, John!
Area: 50
Global Variable: 100
User: Mike, Age: 25, City: New York

===========================================
TASK 3: CONDITIONAL STATEMENTS AND LOGIC
===========================================
Create "conditionals.php" demonstrating:

1. if/else Statements:
   - Check if number is positive, negative, or zero
   - Display appropriate message

2. if/elseif/else:
   - Grade calculator (A, B, C, D, F)
   - Input: score (0-100)
   - Output: letter grade

3. Switch Statement:
   - Day of week calculator
   - Input: number (1-7)
   - Output: day name

4. Multiple Conditions:
   - Age verification system
   - Check voting age (18+), senior (65+), teenager (13-19)

Example Output:
Number 5 is positive
Score 85 = Grade B
Day 3 = Wednesday
Age 20: Can vote, Not senior, Not teenager

===========================================
TASK 4: FORM HANDLING AND VALIDATION
===========================================
Create "form_handling.php" demonstrating:

1. HTML Form:
   - Create form with: name, email, age
   - Use POST method
   - Add submit button

2. Form Processing:
   - Check if form is submitted ($_POST)
   - Get form data safely
   - Validate required fields

3. Input Validation:
   - Check email format
   - Validate age (numeric, reasonable range)
   - Display specific error messages

4. Success Display:
   - Show success message if validation passes
   - Display submitted data

Example Form:
<form method="POST">
    Name: <input type="text" name="name"><br>
    Email: <input type="email" name="email"><br>
    Age: <input type="number" name="age"><br>
    <input type="submit" value="Submit">
</form>

===========================================
TASK 5: SESSION MANAGEMENT
===========================================
Create "sessions.php" demonstrating:

1. Session Basics:
   - Start session
   - Set session variables
   - Display session data

2. Session Counter:
   - Create page visit counter
   - Increment on each visit
   - Display current count

3. User Preferences:
   - Store theme preference (light/dark)
   - Store language preference
   - Display current preferences

4. Session Cleanup:
   - Create logout functionality
   - Destroy session
   - Redirect to login page

Example Output:
Session started
Visit count: 3
Theme: dark
Language: English
Session destroyed

===========================================
TASK 6: SIMPLE LOGIN SYSTEM
===========================================
Create "login_system.php" demonstrating:

1. Login Form:
   - Username/email field
   - Password field
   - Submit button

2. User Authentication:
   - Hard-code 2-3 demo users
   - Check credentials
   - Set session on successful login

3. Protected Page:
   - Check if user is logged in
   - Display welcome message
   - Show user information

4. Logout Functionality:
   - Destroy session
   - Redirect to login page

Demo Users:
- Username: john, Password: 123
- Username: sarah, Password: 456

===========================================
TASK 7: DATA DISPLAY AND TABLES
===========================================
Create "data_display.php" demonstrating:

1. Student Data Display:
   - Create 3-4 student records (individual variables)
   - Display in HTML table
   - Use Bootstrap styling

2. Search Functionality:
   - Add search input field
   - Filter students by name
   - Display matching results

3. Statistics:
   - Count total students
   - Calculate average age
   - Find highest/lowest scores

4. Sorting:
   - Add sort by name functionality
   - Add sort by score functionality

Student Structure:
$student1_name = "John Doe";
$student1_age = 20;
$student1_score = 85;

===========================================
TASK 8: FILE INCLUDES AND REUSABLE CODE
===========================================
Create "includes.php" demonstrating:

1. Header Include:
   - Create header.php with navigation
   - Include in main page
   - Pass page title as variable

2. Footer Include:
   - Create footer.php with copyright
   - Include in main page
   - Display current year

3. Configuration File:
   - Create config.php with settings
   - Store site name, version, admin email
   - Include in main page

4. Functions File:
   - Create functions.php with utility functions
   - Include in main page
   - Use functions for common tasks

File Structure:
- header.php (navigation)
- footer.php (copyright)
- config.php (settings)
- functions.php (utilities)
- main.php (main page)

===========================================
TASK 9: ERROR HANDLING AND SECURITY
===========================================
Create "error_handling.php" demonstrating:

1. Basic Error Handling:
   - Use isset() to check variables
   - Use empty() for validation
   - Display user-friendly error messages

2. Form Validation:
   - Required field validation
   - Email format validation
   - Age range validation
   - Display specific error messages

3. Data Sanitization:
   - Use htmlspecialchars() for output
   - Use trim() for input
   - Use strip_tags() for cleaning

4. Success/Error Messages:
   - Display success messages in green
   - Display error messages in red
   - Use Bootstrap alerts

Example Validation:
- Name: required, min 2 characters
- Email: required, valid format
- Age: required, 1-120 range

===========================================
TASK 10: COMPLETE STUDENT MANAGEMENT SYSTEM
===========================================
Create "final_project.php" demonstrating:

1. Complete Application:
   - Login/logout functionality
   - Student dashboard
   - Student listing with search
   - Individual student profiles

2. User Interface:
   - Clean, responsive design
   - Bootstrap styling
   - Navigation menu
   - User-friendly forms

3. Data Management:
   - Store student information (individual variables)
   - Display student list
   - Search and filter students
   - Add new students

4. Session Management:
   - User authentication
   - Protected pages
   - Logout functionality
   - User preferences

Features:
- Login system
- Student management
- Search functionality
- Responsive design
- Session handling
- Error handling
- Form validation

===========================================
COMPLETION CHECKLIST
===========================================

âœ… TASK 1: Basic PHP Syntax and Variables
âœ… TASK 2: Functions and Variable Scope  
âœ… TASK 3: Conditional Statements and Logic
âœ… TASK 4: Form Handling and Validation
âœ… TASK 5: Session Management
âœ… TASK 6: Simple Login System
âœ… TASK 7: Data Display and Tables
âœ… TASK 8: File Includes and Reusable Code
âœ… TASK 9: Error Handling and Security
âœ… TASK 10: Complete Student Management System

===========================================
LEARNING OBJECTIVES
===========================================

By completing these 10 tasks, you will have mastered:

ðŸ”¹ Basic PHP syntax and data types
ðŸ”¹ Functions and variable scope
ðŸ”¹ Conditional statements and logic
ðŸ”¹ Form handling and validation
ðŸ”¹ Session management
ðŸ”¹ HTML/PHP integration
ðŸ”¹ Bootstrap styling
ðŸ”¹ Error handling and security
ðŸ”¹ File organization and includes
ðŸ”¹ Complete application development

===========================================
SUBMISSION GUIDELINES
===========================================

1. Create separate files for each task
2. Use meaningful file names
3. Include comments in your code
4. Test all functionality
5. Ensure clean, readable code
6. Use Bootstrap for styling
7. Handle errors appropriately
8. Follow PHP best practices

===========================================
GOOD LUCK WITH YOUR PHP LEARNING JOURNEY!
=========================================== 